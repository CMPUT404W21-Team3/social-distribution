# Generated by Django 3.2 on 2021-04-10 01:14

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('Search', '0001_initial'),
        ('Profile', '0027_auto_20210407_2307'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='comment',
            options={'ordering': ['timestamp']},
        ),
        migrations.RenameField(
            model_name='post',
            old_name='content_type',
            new_name='contentType',
        ),
        migrations.RenameField(
            model_name='post',
            old_name='comments_count',
            new_name='likes_count',
        ),
        migrations.RemoveField(
            model_name='author',
            name='friends',
        ),
        migrations.RemoveField(
            model_name='comment',
            name='content_type',
        ),
        migrations.RemoveField(
            model_name='post',
            name='comments',
        ),
        migrations.RemoveField(
            model_name='post',
            name='comments_first_page',
        ),
        migrations.RemoveField(
            model_name='post',
            name='comments_page_size',
        ),
        migrations.RemoveField(
            model_name='post',
            name='url',
        ),
        migrations.AddField(
            model_name='author',
            name='friend_requests_cleared',
            field=models.ManyToManyField(related_name='friend_requests_cleared', to='Search.FriendRequest'),
        ),
        migrations.AddField(
            model_name='author',
            name='posts_cleared',
            field=models.ManyToManyField(related_name='posts_cleared', to='Profile.Post'),
        ),
        migrations.AddField(
            model_name='author',
            name='remote_followers_uuid',
            field=models.TextField(blank=True, null=True, validators=[django.core.validators.int_list_validator]),
        ),
        migrations.AddField(
            model_name='author',
            name='remote_following_uuid',
            field=models.TextField(blank=True, null=True, validators=[django.core.validators.int_list_validator]),
        ),
        migrations.AddField(
            model_name='author',
            name='remote_friends_uuid',
            field=models.TextField(blank=True, null=True, validators=[django.core.validators.int_list_validator]),
        ),
        migrations.AddField(
            model_name='author',
            name='remote_host',
            field=models.CharField(blank=True, max_length=50),
        ),
        migrations.AddField(
            model_name='author',
            name='remote_username',
            field=models.CharField(blank=True, max_length=50),
        ),
        migrations.AddField(
            model_name='comment',
            name='post',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='Profile.post'),
        ),
        migrations.AddField(
            model_name='post',
            name='_host',
            field=models.CharField(blank=True, db_column='host', max_length=50),
        ),
        migrations.AddField(
            model_name='post',
            name='remote_author_displayName',
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AddField(
            model_name='post',
            name='remote_author_id',
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AddField(
            model_name='post',
            name='remote_url',
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AddField(
            model_name='post',
            name='to_author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='to_author', to='Profile.author'),
        ),
        migrations.AlterField(
            model_name='author',
            name='user',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='author', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='comment',
            name='author',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='commenter', to='Profile.author'),
        ),
        migrations.AlterField(
            model_name='comment',
            name='content',
            field=models.TextField(blank=True),
        ),
        migrations.AlterField(
            model_name='post',
            name='visibility',
            field=models.CharField(choices=[('PUBLIC', 'Public'), ('FRIENDS', 'Friends'), ('PRIVATE', 'Private')], default='PUBLIC', max_length=10),
        ),
        migrations.CreateModel(
            name='PostLike',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Profile.author')),
                ('post_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Profile.post')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CommentLike',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Profile.author')),
                ('comment_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Profile.comment')),
                ('post_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Profile.post')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
